# vim: filetype=sh:nospell:
# All my tricks


tmuxrc() { cat<<-'EOF'
	set -g aggressive-resize on
	unbind C-b
	set -g prefix C-Space
	bind C-Space send-prefix
	set -g base-index 1
	# start with pane 1
	bind | split-window -h -c "#{pane_current_path}"  
	bind - split-window -v -c "#{pane_current_path}"
	unbind '"'
	unbind %
	# open new windows in the current path
	bind c new-window -c "#{pane_current_path}"
	# reload config file
	bind r source-file $Tnix/.config/dottmux
	unbind p
	bind p previous-window
	# shorten command delay
	set -sg escape-time 1
	# don't rename windows automatically
	set-option -g allow-rename off
	# mouse control (clickable windows, panes, resizable panes)
	set -g mouse on
	# Use Alt-arrow keys without prefix key to switch panes
	bind -n M-Left select-pane -L
	bind -n M-Right select-pane -R
	bind -n M-Up select-pane -U
	bind -n M-Down select-pane -D
	# enable vi mode keys
	set-window-option -g mode-keys vi
	# set default terminal mode to 256 colors
	set -g default-terminal "screen-256color"
	# fix pbcopy/pbpaste
	if 'command -v reattach-to-user-namespace >/dev/null' \
	    'set -gq @osx-pasteboard true'
	if 'tmux show -gv @osx-clipboard' \
	    'set -g default-command "reattach-to-user-namespace -l $SHELL"'
	# present a menu of URLs to open from the visible pane. sweet.
	bind-key u capture-pane \;\
	    save-buffer /tmp/tmux-buffer \;\
	    split-window -l 10 "urlview /tmp/tmux-buffer"
	bind P paste-buffer
	bind-key -T copy-mode-vi v send-keys -X begin-selection
	bind-key -T copy-mode-vi y send-keys -X copy-selection
	bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
	# loud or quiet?
	set-option -g visual-activity off
	set-option -g visual-bell off
	set-option -g visual-silence off
	set-window-option -g monitor-activity off
	set-option -g bell-action none
	#  modes
	setw -g clock-mode-colour colour5
	setw -g mode-attr bold
	setw -g mode-fg colour1
	setw -g mode-bg colour18
	# panes
	set -g pane-border-bg colour0
	set -g pane-border-fg colour19
	set -g pane-active-border-bg colour0
	set -g pane-active-border-fg colour9
	# statusbar
	set -g status-position top
	set -g status-justify left
	set -g status-bg colour232
	set -g status-fg colour137
	set -g status-attr dim
	set -g status-left ''
	set -g status-right '#{?window_zoomed_flag,üîç,} #[fg=colour255,bold]#H #[fg=colour255,bg=colour19,bold] %b %d #[fg=colour255,bg=colour8,bold] %H:%M '
	set -g status-right '#{?window_zoomed_flag,üîç,} #[fg=colour255,bold]#H '
	set -g status-right-length 50
	set -g status-left-length 20
	setw -g window-status-current-fg colour1
	setw -g window-status-current-bg colour232
	setw -g window-status-current-attr bold
	setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
	setw -g window-status-fg colour9
	setw -g window-status-bg colour18
	setw -g window-status-attr none
	setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
	setw -g window-status-bell-attr bold
	setw -g window-status-bell-fg colour255
	setw -g window-status-bell-bg colour1
	# messages
	set -g message-attr bold
	set -g message-fg colour232
	set -g message-bg colour16
	# layouts
	bind S source-file $Tnix/.config/tmux-session1
	setw -g monitor-activity on
	set -g visual-activity on
	EOF
}
vimrc() { cat<<-'EOF'
	set lispwords+=do-items    
	set lispwords+=do-hash    
	set lispwords+=do-array    
	set lispwords+=while
	set lispwords+=whale
	set lispwords+=do-read    
	set lispwords+=labels
	set backupdir-=.
	set backupdir^=~/tmp,/tmp
	set nocompatible              
	"filetype plugin indent on
	set modelines=3
	set scrolloff=3
	set autoindent
	set hidden "remember ls
	set wildmenu
	set wildmode=list:longest
	set visualbell
	set ttyfast
	set backspace=indent,eol,start
	set laststatus=2
	set splitbelow
	set paste
	set mouse=a
	set title
	set number
	autocmd BufEnter * cd %:p:h
	set showmatch
	set matchtime=15
	set background=light
	set syntax=on
	syntax enable
	set ignorecase
	set incsearch
	set smartcase
	set showmatch
	set hlsearch
	set nofoldenable    " disable folding
	set ruler
	set statusline=%F\ \(%M\)\ %=%l\:%c\ 
	set lispwords+=defthing   
	set lispwords+=doitems    
	set lispwords+=deftest
	set lispwords+=defkeep
	set lispwords+=labels
	set lispwords+=labels
	set lispwords+=doread
	set lispwords+=while
	set lispwords+=until
	set path+=../**
	if has("mouse_sgr")
	    set ttymouse=sgr
	else
	    set ttymouse=xterm2 
	end        
	colorscheme default
	set termguicolors
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	map Z 1z=
	set spell spelllang=en_us
	set spellsuggest=fast,20 "Don't show too much suggestion for spell check
	nn <F7> :setlocal spell! spell?<CR>
	let g:vim_markdown_fenced_languages = ['awk=awk']
	set nocompatible              " be iMproved, required
	filetype off                  " required

	" set the runtime path to include Vundle and initialize
	set rtp+=~/tmp/ish/bundle/Vundle.vim
	call vundle#begin()
	" alternatively, pass a path where Vundle should install plugins
	"call vundle#begin('~/some/path/here')

	" let Vundle manage Vundle, required
	Plugin 'VundleVim/Vundle.vim'
	Plugin 'tpope/vim-fugitive'
	Plugin 'scrooloose/nerdtree'
	Plugin 'airblade/vim-gitgutter'
	Plugin 'itchyny/lightline.vim'
	Plugin 'junegunn/fzf'
	Plugin 'junegunn/fzf.vim'
	Plugin 'jnurmine/Zenburn'
	Plugin 'altercation/vim-colors-solarized'
	Plugin 'seebi/dircolors-solarized'
	Plugin 'nequo/vim-allomancer'
	Plugin 'nanotech/jellybeans.vim'
	Plugin 'vimwiki/vimwiki'
        " All of your Plugins must be added before the following line
	call vundle#end()            " required
	filetype plugin indent on    " required
	" To ignore plugin indent changes, instead use:
	"filetype plugin on
	colorscheme jellybeans
	map <C-o> :NERDTreeToggle<CR>
	nnoremap <Leader><space> :noh<cr>
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
	hi Normal guibg=NONE ctermbg=NONE
	hi NonText guibg=NONE ctermbg=NONE
        set fillchars=vert:\|
	hi VertSplit cterm=NONE	
	EOF
}
bashrc() { cat<<-'EOF'
	root=$(git rev-parse --show-toplevel)
	ishs=$HOME/tmp/ish
	mkdir -p $ishs
        export PATH="$PATH:$HOME/opt/fun/bin:$(PWD)"
	alias vi="vim -u $ishs/.vimrc "
	alias ..='cd ..'
	alias tmux="$(which tmux) -f $ishs/.tmuxrc "
	alias python="$(which python3) -B "
	alias matrix="$(which cmatrix) -bs  -C blue"
	alias rain="$(which rain) -d 60 "
	alias tree="$(which tree) -C "
	alias mc="$(which mc) -x "
	alias zap='rm -rf $root/raised/\.*.swp $root/raised/*.pyc $root/raised/__pycache__'
	alias add='zap; git add *'
	alias put='gfig; zap; git commit -am saving; git push; git status'
	alias get='gfig; git pull'
	vim -u $ishs/.vimrc +PlugInstall  +qall
	uname="$(uname -s)"
	case "${uname}" in
	     Linux*)
	       alias ls='ls --color=auto';;
	     Darwin*)
	       alias ls='ls -G' ;;
	     *) ;;
	esac
	_c0="\033[00m"     # white
	_c1="\033[01;32m"  # green
 	_c2="\033[01;34m"  # blue
 	_c3="\033[31m"     # red
 	_c5="\033[35m"     # purple
 	_c6="\033[33m"     # yellow
 	_c7="\033[36m"     # turquoise _c8="\033[96m"  # magenta
 
	ok()  { $root/fun ${1}ok.fun $*; }
	f()  { $root/fun $1.fun $*; }
        publish() {
		( cd $root/src
		  $root/md *.fun
                )
 		cp $HOME/opt/fun/docs/*.md $root/docs
		git add $root/docs/*
		put
	}
		
		 
	gfig() {
	   git config --global credential.helper cache
	   git config credential.helper 'cache --timeout=3600'
	}
 
	reload() { . $ishs/.bashrc ; }
	 
  here() { cd $1; basename "$PWD"; }
  PROMPT_COMMAND='echo -ne "${_c2}iSH:${_c6}$(git branch 2>/dev/null | grep '^*' | colrm 1 2) ";PS1="${_c1}$_c0$(here ../..)/$(here ..)/$(here .) ${_c3}\!>${_c0}\e[m "'
	EOF
}
# 
AFTER=1
#brew install bsdgames-osx

for c in gawk git tmux vim mc tree cmatrix rain; do
  if [ -z "$(which $c)" ]; then
    AFTER=""
    echo "#E> missing: $c"
  fi
done

if [ "$AFTER" == "1" ]; then
  if [ "$1" == "0" ]; then
    rm -rf $HOME/tmp/ish
  fi
  mkdir -p $HOME/tmp/ish
  (
  cd       $HOME/tmp/ish
  if [ ! -f ".vimrc"  ]; then vimrc  > .vimrc;  fi  
  if [ ! -f ".tmuxrc" ]; then tmuxrc > .tmuxrc; fi  
  if [ ! -f ".bashrc" ]; then bashrc > .bashrc; fi  
  if [ ! -d "bundle"  ]; then
     mkdir -p bundle
     git clone https://github.com/VundleVim/Vundle.vim.git bundle/Vundle.vim
  fi
 )
	echo -ne "\033[96m"
  cat<<-"EOF"

	   (\____/)         
	     (_oo_)         Roger roger...
	       (O)        
	     __||__    \)  
	  []/______\[] /    
	  / \______/ \/     
	 /    /__\          iSH v3 (c) 2019
	(\   /____\         <timm@ieee.org>

	EOF
  echo -ne "\033[00m"	
  bash --init-file $HOME/tmp/ish/.bashrc  -i
fi
